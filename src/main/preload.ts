import { contextBridge, ipcRenderer } from 'electron';

// Expose protected methods that allow the renderer process to use
// the ipcRenderer without exposing the entire object
contextBridge.exposeInMainWorld('electronAPI', {
  // Activity Data API
  createActivityData: (data: any) => ipcRenderer.invoke('activity-data:create', data),
  listActivityData: (filters?: any) => ipcRenderer.invoke('activity-data:list', filters),
  updateActivityData: (id: number, data: any) => ipcRenderer.invoke('activity-data:update', id, data),
  deleteActivityData: (id: number) => ipcRenderer.invoke('activity-data:delete', id),

  // Emission Factors API
  listEmissionFactors: (filters?: any) => ipcRenderer.invoke('emission-factors:list', filters),
  createEmissionFactor: (data: any) => ipcRenderer.invoke('emission-factors:create', data),
  searchEmissionFactors: (query: string) => ipcRenderer.invoke('emission-factors:search', query),

  // Calculations API
  calculateEmissions: (data: any) => ipcRenderer.invoke('calculations:calculate', data),
  listCalculations: (filters?: any) => ipcRenderer.invoke('calculations:list', filters),

  listScope3Categories: () => ipcRenderer.invoke('scope3-categories:list'),
  updateScope3Category: (id: number, data: any) => ipcRenderer.invoke('scope3-categories:update', id, data),

  createSupplierData: (data: any) => ipcRenderer.invoke('supplier-data:create', data),
  listSupplierData: (filters?: any) => ipcRenderer.invoke('supplier-data:list', filters),
  updateSupplierData: (id: number, data: any) => ipcRenderer.invoke('supplier-data:update', id, data),
  deleteSupplierData: (id: number) => ipcRenderer.invoke('supplier-data:delete', id),

  createIntegration: (data: any) => ipcRenderer.invoke('integrations:create', data),
  listIntegrations: () => ipcRenderer.invoke('integrations:list'),
  updateIntegration: (id: number, data: any) => ipcRenderer.invoke('integrations:update', id, data),
  deleteIntegration: (id: number) => ipcRenderer.invoke('integrations:delete', id),
  testIntegrationConnection: (id: number) => ipcRenderer.invoke('integrations:test', id),

  createScenario: (data: any) => ipcRenderer.invoke('scenarios:create', data),
  listScenarios: () => ipcRenderer.invoke('scenarios:list'),
  updateScenario: (id: number, data: any) => ipcRenderer.invoke('scenarios:update', id, data),
  deleteScenario: (id: number) => ipcRenderer.invoke('scenarios:delete', id),
  runScenario: (id: number) => ipcRenderer.invoke('scenarios:run', id),

  createComplianceReport: (data: any) => ipcRenderer.invoke('compliance-reports:create', data),
  listComplianceReports: (filters?: any) => ipcRenderer.invoke('compliance-reports:list', filters),
  updateComplianceReport: (id: number, data: any) => ipcRenderer.invoke('compliance-reports:update', id, data),
  deleteComplianceReport: (id: number) => ipcRenderer.invoke('compliance-reports:delete', id),
  exportComplianceReport: (id: number, format: string) => ipcRenderer.invoke('compliance-reports:export', id, format),

  createUserRole: (data: any) => ipcRenderer.invoke('user-roles:create', data),
  listUserRoles: () => ipcRenderer.invoke('user-roles:list'),
  updateUserRole: (id: number, data: any) => ipcRenderer.invoke('user-roles:update', id, data),
  deleteUserRole: (id: number) => ipcRenderer.invoke('user-roles:delete', id),

  createUser: (data: any) => ipcRenderer.invoke('users:create', data),
  listUsers: () => ipcRenderer.invoke('users:list'),
  updateUser: (id: number, data: any) => ipcRenderer.invoke('users:update', id, data),
  deleteUser: (id: number) => ipcRenderer.invoke('users:delete', id),

  detectAnomalies: (dataType: string, threshold?: number) => ipcRenderer.invoke('anomalies:detect', dataType, threshold),
  listAnomalies: (filters?: any) => ipcRenderer.invoke('anomalies:list', filters),
  resolveAnomaly: (id: number, resolution: string) => ipcRenderer.invoke('anomalies:resolve', id, resolution),
  createPredictiveModel: (data: any) => ipcRenderer.invoke('predictive-models:create', data),
  listPredictiveModels: () => ipcRenderer.invoke('predictive-models:list'),
  trainModel: (id: number) => ipcRenderer.invoke('predictive-models:train', id),
  predictMissingData: (dataType: string, context: any) => ipcRenderer.invoke('ml:predict-missing-data', dataType, context),
  listMLSuggestions: (filters?: any) => ipcRenderer.invoke('ml-suggestions:list', filters),
  acceptSuggestion: (id: number) => ipcRenderer.invoke('ml-suggestions:accept', id),
  rejectSuggestion: (id: number) => ipcRenderer.invoke('ml-suggestions:reject', id),

  createCarbonTarget: (data: any) => ipcRenderer.invoke('carbon-targets:create', data),
  listCarbonTargets: () => ipcRenderer.invoke('carbon-targets:list'),
  updateCarbonTarget: (id: number, data: any) => ipcRenderer.invoke('carbon-targets:update', id, data),
  deleteCarbonTarget: (id: number) => ipcRenderer.invoke('carbon-targets:delete', id),
  validateSBTi: (id: number) => ipcRenderer.invoke('carbon-targets:validate-sbti', id),
  createReductionProject: (data: any) => ipcRenderer.invoke('reduction-projects:create', data),
  listReductionProjects: (filters?: any) => ipcRenderer.invoke('reduction-projects:list', filters),
  updateReductionProject: (id: number, data: any) => ipcRenderer.invoke('reduction-projects:update', id, data),
  deleteReductionProject: (id: number) => ipcRenderer.invoke('reduction-projects:delete', id),
  calculateProjectROI: (id: number) => ipcRenderer.invoke('reduction-projects:calculate-roi', id),
  createCarbonPricingScenario: (data: any) => ipcRenderer.invoke('carbon-pricing:create', data),
  listCarbonPricingScenarios: () => ipcRenderer.invoke('carbon-pricing:list'),
  updateCarbonPricingScenario: (id: number, data: any) => ipcRenderer.invoke('carbon-pricing:update', id, data),
  deleteCarbonPricingScenario: (id: number) => ipcRenderer.invoke('carbon-pricing:delete', id),

  createSupplierEngagement: (data: any) => ipcRenderer.invoke('supplier-engagements:create', data),
  listSupplierEngagements: (filters?: any) => ipcRenderer.invoke('supplier-engagements:list', filters),
  updateSupplierEngagement: (id: number, data: any) => ipcRenderer.invoke('supplier-engagements:update', id, data),
  deleteSupplierEngagement: (id: number) => ipcRenderer.invoke('supplier-engagements:delete', id),
  createSupplyChainMap: (data: any) => ipcRenderer.invoke('supply-chain-maps:create', data),
  listSupplyChainMaps: (filters?: any) => ipcRenderer.invoke('supply-chain-maps:list', filters),
  updateSupplyChainMap: (id: number, data: any) => ipcRenderer.invoke('supply-chain-maps:update', id, data),
  deleteSupplyChainMap: (id: number) => ipcRenderer.invoke('supply-chain-maps:delete', id),
  createSupplierAssessment: (data: any) => ipcRenderer.invoke('supplier-assessments:create', data),
  listSupplierAssessments: (filters?: any) => ipcRenderer.invoke('supplier-assessments:list', filters),
  updateSupplierAssessment: (id: number, data: any) => ipcRenderer.invoke('supplier-assessments:update', id, data),
  deleteSupplierAssessment: (id: number) => ipcRenderer.invoke('supplier-assessments:delete', id),
  generateSupplierReport: (supplierId: number) => ipcRenderer.invoke('suppliers:generate-report', supplierId),

  createEntity: (data: any) => ipcRenderer.invoke('entities:create', data),
  listEntities: (filters?: any) => ipcRenderer.invoke('entities:list', filters),
  updateEntity: (id: number, data: any) => ipcRenderer.invoke('entities:update', id, data),
  deleteEntity: (id: number) => ipcRenderer.invoke('entities:delete', id),
  getEntityHierarchy: () => ipcRenderer.invoke('entities:get-hierarchy'),
  createRegionalCompliance: (data: any) => ipcRenderer.invoke('regional-compliance:create', data),
  listRegionalCompliance: (filters?: any) => ipcRenderer.invoke('regional-compliance:list', filters),
  updateRegionalCompliance: (id: number, data: any) => ipcRenderer.invoke('regional-compliance:update', id, data),
  deleteRegionalCompliance: (id: number) => ipcRenderer.invoke('regional-compliance:delete', id),
  createDataGovernancePolicy: (data: any) => ipcRenderer.invoke('data-governance:create', data),
  listDataGovernancePolicies: (filters?: any) => ipcRenderer.invoke('data-governance:list', filters),
  updateDataGovernancePolicy: (id: number, data: any) => ipcRenderer.invoke('data-governance:update', id, data),
  deleteDataGovernancePolicy: (id: number) => ipcRenderer.invoke('data-governance:delete', id),

  listIntegrationPlugins: (filters?: any) => ipcRenderer.invoke('plugins:list', filters),
  installPlugin: (pluginId: number) => ipcRenderer.invoke('plugins:install', pluginId),
  uninstallPlugin: (pluginId: number) => ipcRenderer.invoke('plugins:uninstall', pluginId),
  togglePlugin: (pluginId: number, isActive: boolean) => ipcRenderer.invoke('plugins:toggle', pluginId, isActive),
  createCustomCalculation: (data: any) => ipcRenderer.invoke('custom-calculations:create', data),
  listCustomCalculations: (filters?: any) => ipcRenderer.invoke('custom-calculations:list', filters),
  updateCustomCalculation: (id: number, data: any) => ipcRenderer.invoke('custom-calculations:update', id, data),
  deleteCustomCalculation: (id: number) => ipcRenderer.invoke('custom-calculations:delete', id),
  executeCustomCalculation: (id: number, inputs: any) => ipcRenderer.invoke('custom-calculations:execute', id, inputs),
  createAutomationWorkflow: (data: any) => ipcRenderer.invoke('automation-workflows:create', data),
  listAutomationWorkflows: (filters?: any) => ipcRenderer.invoke('automation-workflows:list', filters),
  updateAutomationWorkflow: (id: number, data: any) => ipcRenderer.invoke('automation-workflows:update', id, data),
  deleteAutomationWorkflow: (id: number) => ipcRenderer.invoke('automation-workflows:delete', id),
  executeAutomationWorkflow: (id: number) => ipcRenderer.invoke('automation-workflows:execute', id),

  createDeepLearningModel: (data: any) => ipcRenderer.invoke('deep-learning-models:create', data),
  listDeepLearningModels: (filters?: any) => ipcRenderer.invoke('deep-learning-models:list', filters),
  updateDeepLearningModel: (id: number, data: any) => ipcRenderer.invoke('deep-learning-models:update', id, data),
  deleteDeepLearningModel: (id: number) => ipcRenderer.invoke('deep-learning-models:delete', id),
  trainDeepLearningModel: (id: number) => ipcRenderer.invoke('deep-learning-models:train', id),
  getModelInsights: (id: number) => ipcRenderer.invoke('deep-learning-models:get-insights', id),
  createStrategyRecommendation: (data: any) => ipcRenderer.invoke('strategy-recommendations:create', data),
  listStrategyRecommendations: (filters?: any) => ipcRenderer.invoke('strategy-recommendations:list', filters),
  updateStrategyRecommendation: (id: number, data: any) => ipcRenderer.invoke('strategy-recommendations:update', id, data),
  deleteStrategyRecommendation: (id: number) => ipcRenderer.invoke('strategy-recommendations:delete', id),
  generateRecommendations: (context?: any) => ipcRenderer.invoke('strategy-recommendations:generate', context),
  listAutomatedInsights: (filters?: any) => ipcRenderer.invoke('automated-insights:list', filters),
  generateInsightsReport: (filters?: any) => ipcRenderer.invoke('automated-insights:generate-report', filters),
  createDigitalTwin: (data: any) => ipcRenderer.invoke('digital-twins:create', data),
  listDigitalTwins: (filters?: any) => ipcRenderer.invoke('digital-twins:list', filters),
  updateDigitalTwin: (id: number, data: any) => ipcRenderer.invoke('digital-twins:update', id, data),
  deleteDigitalTwin: (id: number) => ipcRenderer.invoke('digital-twins:delete', id),
  syncDigitalTwinData: (id: number) => ipcRenderer.invoke('digital-twins:sync-data', id),

  createVerificationWorkflow: (data: any) => ipcRenderer.invoke('verification-workflows:create', data),
  listVerificationWorkflows: (filters?: any) => ipcRenderer.invoke('verification-workflows:list', filters),
  updateVerificationWorkflow: (id: number, data: any) => ipcRenderer.invoke('verification-workflows:update', id, data),
  deleteVerificationWorkflow: (id: number) => ipcRenderer.invoke('verification-workflows:delete', id),
  advanceWorkflowStep: (id: number) => ipcRenderer.invoke('verification-workflows:advance-step', id),
  getAuditTrail: (entityType: string, entityId: number) => ipcRenderer.invoke('audit-trail:get', entityType, entityId),
  verifyAuditTrailIntegrity: (entityType: string, entityId: number) => ipcRenderer.invoke('audit-trail:verify-integrity', entityType, entityId),
  createThirdPartyVerifier: (data: any) => ipcRenderer.invoke('third-party-verifiers:create', data),
  listThirdPartyVerifiers: (filters?: any) => ipcRenderer.invoke('third-party-verifiers:list', filters),
  updateThirdPartyVerifier: (id: number, data: any) => ipcRenderer.invoke('third-party-verifiers:update', id, data),
  deleteThirdPartyVerifier: (id: number) => ipcRenderer.invoke('third-party-verifiers:delete', id),
  requestVerification: (verifierId: number, dataScope: any) => ipcRenderer.invoke('third-party-verifiers:request-verification', verifierId, dataScope),
  getDataProvenance: (dataType: string, dataId: number) => ipcRenderer.invoke('data-provenance:get', dataType, dataId),
  traceDataLineage: (dataType: string, dataId: number) => ipcRenderer.invoke('data-provenance:trace-lineage', dataType, dataId),
  validateDataCompliance: (dataType: string, dataId: number) => ipcRenderer.invoke('data-provenance:validate-compliance', dataType, dataId),

  createIoTDevice: (data: any) => ipcRenderer.invoke('iot-devices:create', data),
  listIoTDevices: (filters?: any) => ipcRenderer.invoke('iot-devices:list', filters),
  updateIoTDevice: (id: number, data: any) => ipcRenderer.invoke('iot-devices:update', id, data),
  deleteIoTDevice: (id: number) => ipcRenderer.invoke('iot-devices:delete', id),
  discoverIoTDevices: (networkConfig?: any) => ipcRenderer.invoke('iot-devices:discover', networkConfig),
  testDeviceConnection: (id: number) => ipcRenderer.invoke('iot-devices:test-connection', id),
  createRealtimeMonitor: (data: any) => ipcRenderer.invoke('realtime-monitors:create', data),
  listRealtimeMonitors: (filters?: any) => ipcRenderer.invoke('realtime-monitors:list', filters),
  updateRealtimeMonitor: (id: number, data: any) => ipcRenderer.invoke('realtime-monitors:update', id, data),
  deleteRealtimeMonitor: (id: number) => ipcRenderer.invoke('realtime-monitors:delete', id),
  getRealtimeData: (monitorId: number) => ipcRenderer.invoke('realtime-monitors:get-data', monitorId),
  listSensorData: (deviceId: number, filters?: any) => ipcRenderer.invoke('sensor-data:list', deviceId, filters),
  processSensorData: (deviceId: number, startTime: string, endTime: string) => ipcRenderer.invoke('sensor-data:process', deviceId, startTime, endTime),
  createAlertRule: (data: any) => ipcRenderer.invoke('alert-rules:create', data),
  listAlertRules: (filters?: any) => ipcRenderer.invoke('alert-rules:list', filters),
  updateAlertRule: (id: number, data: any) => ipcRenderer.invoke('alert-rules:update', id, data),
  deleteAlertRule: (id: number) => ipcRenderer.invoke('alert-rules:delete', id),
  testAlertRule: (id: number) => ipcRenderer.invoke('alert-rules:test', id),
  getActiveAlerts: (filters?: any) => ipcRenderer.invoke('alerts:get-active', filters),

  createFacility3DModel: (data: any) => ipcRenderer.invoke('facility-3d-models:create', data),
  listFacility3DModels: (filters?: any) => ipcRenderer.invoke('facility-3d-models:list', filters),
  updateFacility3DModel: (id: number, data: any) => ipcRenderer.invoke('facility-3d-models:update', id, data),
  deleteFacility3DModel: (id: number) => ipcRenderer.invoke('facility-3d-models:delete', id),
  exportFacility3DModel: (id: number, format: string) => ipcRenderer.invoke('facility-3d-models:export', id, format),
  createARDataCollection: (data: any) => ipcRenderer.invoke('ar-data-collections:create', data),
  listARDataCollections: (filters?: any) => ipcRenderer.invoke('ar-data-collections:list', filters),
  updateARDataCollection: (id: number, data: any) => ipcRenderer.invoke('ar-data-collections:update', id, data),
  deleteARDataCollection: (id: number) => ipcRenderer.invoke('ar-data-collections:delete', id),
  createTrainingModule: (data: any) => ipcRenderer.invoke('training-modules:create', data),
  listTrainingModules: (filters?: any) => ipcRenderer.invoke('training-modules:list', filters),
  updateTrainingModule: (id: number, data: any) => ipcRenderer.invoke('training-modules:update', id, data),
  deleteTrainingModule: (id: number) => ipcRenderer.invoke('training-modules:delete', id),
  getTrainingProgress: (userId: number, moduleId?: number) => ipcRenderer.invoke('training-progress:get', userId, moduleId),
  updateTrainingProgress: (id: number, data: any) => ipcRenderer.invoke('training-progress:update', id, data),
  issueTrainingCertificate: (userId: number, moduleId: number) => ipcRenderer.invoke('training-progress:issue-certificate', userId, moduleId),
  createDataStory: (data: any) => ipcRenderer.invoke('data-stories:create', data),
  listDataStories: (filters?: any) => ipcRenderer.invoke('data-stories:list', filters),
  updateDataStory: (id: number, data: any) => ipcRenderer.invoke('data-stories:update', id, data),
  deleteDataStory: (id: number) => ipcRenderer.invoke('data-stories:delete', id),
  generateDataStoryNarrative: (storyId: number) => ipcRenderer.invoke('data-stories:generate-narrative', storyId),

  getCacheStats: () => ipcRenderer.invoke('cache:get-stats'),
  clearCache: (cacheType?: string) => ipcRenderer.invoke('cache:clear', cacheType),
  optimizeCache: () => ipcRenderer.invoke('cache:optimize'),
  createDistributedJob: (data: any) => ipcRenderer.invoke('distributed-jobs:create', data),
  listDistributedJobs: (filters?: any) => ipcRenderer.invoke('distributed-jobs:list', filters),
  getJobProgress: (id: number) => ipcRenderer.invoke('distributed-jobs:get-progress', id),
  cancelDistributedJob: (id: number) => ipcRenderer.invoke('distributed-jobs:cancel', id),
  getResourceMetrics: (timeRange?: any) => ipcRenderer.invoke('resource-metrics:get', timeRange),
  optimizeResources: () => ipcRenderer.invoke('resource-metrics:optimize'),
  getSecurityConfigs: () => ipcRenderer.invoke('security-configs:get'),
  updateSecurityConfig: (id: number, data: any) => ipcRenderer.invoke('security-configs:update', id, data),
  auditSecurity: () => ipcRenderer.invoke('security:audit'),
  listEncryptionKeys: () => ipcRenderer.invoke('encryption-keys:list'),
  createEncryptionKey: (data: any) => ipcRenderer.invoke('encryption-keys:create', data),
  rotateEncryptionKey: (id: number) => ipcRenderer.invoke('encryption-keys:rotate', id),
  testQuantumResistance: (keyId: number) => ipcRenderer.invoke('encryption-keys:test-quantum-resistance', keyId),

  // ===============================================
  // ===============================================

  createEmissionForecast: (data: any) => ipcRenderer.invoke('forecasts:create', data),
  listEmissionForecasts: (filters?: any) => ipcRenderer.invoke('forecasts:list', filters),
  getEmissionForecast: (id: number) => ipcRenderer.invoke('forecasts:get', id),
  updateEmissionForecast: (id: number, data: any) => ipcRenderer.invoke('forecasts:update', id, data),
  createForecastingFactor: (data: any) => ipcRenderer.invoke('forecasting-factors:create', data),
  listForecastingFactors: (filters?: any) => ipcRenderer.invoke('forecasting-factors:list', filters),
  runMultiFactorForecast: (params: any) => ipcRenderer.invoke('forecasts:run-multi-factor', params),
  trainLSTMModel: (params: any) => ipcRenderer.invoke('ml:train-lstm', params),

  createCarbonBudget: (data: any) => ipcRenderer.invoke('carbon-budgets:create', data),
  listCarbonBudgets: (filters?: any) => ipcRenderer.invoke('carbon-budgets:list', filters),
  getCarbonBudget: (id: number) => ipcRenderer.invoke('carbon-budgets:get', id),
  updateCarbonBudgetConsumption: (id: number, amount: number) => ipcRenderer.invoke('carbon-budgets:update-consumption', id, amount),
  allocateBudget: (data: any) => ipcRenderer.invoke('budget-allocations:create', data),
  listBudgetAllocations: (budgetId?: number) => ipcRenderer.invoke('budget-allocations:list', budgetId),
  optimizeBudgetAllocation: (budgetId: number) => ipcRenderer.invoke('budget-allocations:optimize', budgetId),
  createBudgetVariance: (data: any) => ipcRenderer.invoke('budget-variances:create', data),
  listBudgetVariances: (budgetId?: number) => ipcRenderer.invoke('budget-variances:list', budgetId),

  createPredictiveAlert: (data: any) => ipcRenderer.invoke('predictive-alerts:create', data),
  listPredictiveAlerts: (filters?: any) => ipcRenderer.invoke('predictive-alerts:list', filters),
  acknowledgeAlert: (id: number) => ipcRenderer.invoke('predictive-alerts:acknowledge', id),
  resolveAlert: (id: number) => ipcRenderer.invoke('predictive-alerts:resolve', id),
  createEarlyWarningTrigger: (data: any) => ipcRenderer.invoke('early-warnings:create-trigger', data),
  listEarlyWarningTriggers: (activeOnly?: boolean) => ipcRenderer.invoke('early-warnings:list-triggers', activeOnly),
  evaluateWarningTriggers: () => ipcRenderer.invoke('early-warnings:evaluate'),
  createActionPlan: (data: any) => ipcRenderer.invoke('action-plans:create', data),
  listActionPlans: (filters?: any) => ipcRenderer.invoke('action-plans:list', filters),
  activateActionPlan: (id: number) => ipcRenderer.invoke('action-plans:activate', id),

  createScenarioSimulation: (data: any) => ipcRenderer.invoke('scenario-simulations:create', data),
  listScenarioSimulations: (filters?: any) => ipcRenderer.invoke('scenario-simulations:list', filters),
  runMonteCarloSimulation: (params: any) => ipcRenderer.invoke('scenarios:run-monte-carlo', params),
  runSensitivityAnalysis: (params: any) => ipcRenderer.invoke('sensitivity-analysis:run', params),
  listSensitivityAnalyses: () => ipcRenderer.invoke('sensitivity-analysis:list'),

  createEnterpriseForecast: (data: any) => ipcRenderer.invoke('enterprise-forecasts:create', data),
  listEnterpriseForecasts: (filters?: any) => ipcRenderer.invoke('enterprise-forecasts:list', filters),
  publishEnterpriseForecast: (id: number) => ipcRenderer.invoke('enterprise-forecasts:publish', id),
  generateExecutiveDashboard: (params?: any) => ipcRenderer.invoke('executive-dashboard:generate', params),
  createMLTrainingDataset: (data: any) => ipcRenderer.invoke('ml-training-data:create', data),
  listMLTrainingDatasets: (filters?: any) => ipcRenderer.invoke('ml-training-data:list', filters),
  getModelPerformanceMetrics: (modelId?: number) => ipcRenderer.invoke('model-performance:get', modelId),

  // AI-Optional Framework API
  listAIFeatureToggles: (filters?: any) => ipcRenderer.invoke('ai-features:list', filters),
  getAIFeatureToggle: (featureKey: string) => ipcRenderer.invoke('ai-features:get', featureKey),
  updateAIFeatureToggle: (featureKey: string, isEnabled: boolean, updatedBy?: string) => 
    ipcRenderer.invoke('ai-features:update', featureKey, isEnabled, updatedBy),
  checkAIFeatureEnabled: (featureKey: string) => ipcRenderer.invoke('ai-features:check-enabled', featureKey),
  listAIOperationModes: () => ipcRenderer.invoke('ai-operation-modes:list'),
  getActiveOperationMode: () => ipcRenderer.invoke('ai-operation-modes:get-active'),
  setActiveOperationMode: (modeName: string, configuredBy?: string) => 
    ipcRenderer.invoke('ai-operation-modes:set-active', modeName, configuredBy),
  listAIUsageAudit: (filters?: any) => ipcRenderer.invoke('ai-audit:list', filters),
  createAIPolicy: (policy: any) => ipcRenderer.invoke('ai-policies:create', policy),
  listAIPolicies: (filters?: any) => ipcRenderer.invoke('ai-policies:list', filters),
  updateAIPolicy: (id: number, updates: any) => ipcRenderer.invoke('ai-policies:update', id, updates),
  recordAIPerformanceMetric: (metric: any) => ipcRenderer.invoke('ai-performance:record', metric),
  getAIPerformanceMetrics: (filters?: any) => ipcRenderer.invoke('ai-performance:get', filters),
  getAIFeatureComparison: (featureKey: string) => ipcRenderer.invoke('ai-performance:compare', featureKey),
});
